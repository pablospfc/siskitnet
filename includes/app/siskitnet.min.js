var sisKitnetApp =  angular.module('sisKitnet-App',[
    'idf.br-filters',
    'ngRoute',
    'ngMessages',
    'angularModalService',
    'ui.utils.masks',
    'authentication',
    'ngCookies',
    'angularUtils.directives.dirPagination'
]);
// $scope.today = new Date();
// $scope.todayString = $filter('date')(new Date(), 'dd-MM-yyyy');
// console.log($scope.todayString);

sisKitnetApp.directive('cpfValido', function () {
    return {
        restrict: 'A',
        require: 'ngModel',
        link: function (scope, elem, attrs, ctrl) {

            scope.$watch(attrs.ngModel, function () {

                if (elem[0].value.length == 0)
                    ctrl.$setValidity('cpfValido', true);
                else if (elem[0].value.length < 11) {
                    //aplicar o algoritmo de validação completo do CPF
                    ctrl.$setValidity('cpfValido', false);
                }
                else ctrl.$setValidity('cpfValido', true);
            });
        }
    };
});

sisKitnetApp.directive('stringToNumber', function() {
    return {
        require: 'ngModel',
        link: function (scope, element, attrs, ngModel) {
            ngModel.$parsers.push(function (value) {
                return '' + value;
            });
            ngModel.$formatters.push(function (value) {
                return parseFloat(value);
            });
        }
    }
});

sisKitnetApp.config(["$routeProvider", "$locationProvider", function($routeProvider, $locationProvider) {
    $locationProvider.html5Mode( { enabled : false, requireBase : false } );
    $locationProvider.hashPrefix('');
    $routeProvider.when('/', {
        templateUrl: 'templates/view/home/index.html',
        controller: 'HomeController',
    }).
    when('/locatarios', {
        templateUrl: 'templates/view/locatario/index.html',
        controller: 'LocatariosController'
    }).
    when('/contratos', {
        templateUrl: 'templates/view/contrato/index.phtml',
        controller: 'ContratosController'
    }).
    when('/despesas', {
        templateUrl: 'templates/view/despesa/index.html',
        controller: 'DespesasController'
    }).
    when('/imoveis', {
        templateUrl: 'templates/view/imovel/index.html',
        controller: 'ImoveisController'
    }).
    when('/pagamentos', {
        templateUrl: 'templates/view/pagamento/index.phtml',
        controller: 'PagamentosController'
    }).
    when('/relatorios', {
        templateUrl: 'templates/view/relatorio/index.hhtml',
        controller: 'RelatoriosController'
    }).
    when('/perfis', {
        templateUrl: 'templates/view/perfil/index.phtml',
        controller: 'PerfisController'
    }).
    when('/usuarios', {
        templateUrl: 'templates/view/usuario/index.phtml',
        controller: 'UsuariosController'
    }).
    when('/alugueis-mes', {
        templateUrl: 'templates/view/aluguel/alugueis-mes.html',
        controller: 'AlugueisController',
        resolve: {
            Alugueis: ["SiskitnetService", function (SiskitnetService) {
                return SiskitnetService.getAlugueisMes();
            }]
        }
    }).
    when('/alugueis-atrasados', {
        templateUrl: 'templates/view/aluguel/alugueis-atrasados.html',
        controller: 'AlugueisController',
        resolve: {
            Alugueis: ["SiskitnetService", function (SiskitnetService) {
                return SiskitnetService.getAlugueisAtrasados();
            }]
        }
    }).
    when('/contratos-vencidos', {
        templateUrl: 'templates/view/renovacao/index.html',
        controller: 'RenovacaoController',
        // resolve: {
        //     Vencidos: function (SiskitnetService) {
        //         return SiskitnetService.getContratosVencidos();
        //     }
        // }
    }).
    when('/login', {
        templateUrl: 'templates/view/login/index.html',
        controller: 'LoginController',
    })
    .otherwise ({ redirectTo: '/login' });

}]);

// sisKitnetApp.run(function ($rootScope, $location, SiskitnetService) {
//     $rootScope.goTo = function (url) {
//         if (url=='alugueis-atrasados') {
//             SiskitnetService.getAlugueisAtrasados($rootScope);
//             $location.path(url);
//         }else{
//             SiskitnetService.getAlugueisMes($rootScope);
//             $location.path(url);
//         }
//     };
// });

sisKitnetApp.run(['$rootScope', '$location', '$cookieStore', '$http',
    function ($rootScope, $location, $cookieStore, $http) {
        // keep user logged in after page refresh
        $rootScope.globals = $cookieStore.get('globals') || {};
        if ($rootScope.globals.currentUser) {
            $http.defaults.headers.common['Authorization'] = 'Basic ' + $rootScope.globals.currentUser.authdata; // jshint ignore:line
        }

        $rootScope.$on('$locationChangeStart', function (event, next, current) {
            // redirect to login page if not logged in
            if ($location.path() !== '/login' && !$rootScope.globals.currentUser) {
                $location.path('/login');
            }
        });
    }]);

sisKitnetApp.controller('AlugueisController', ["$scope", "Alugueis", function ($scope, Alugueis) {
    $scope.alugueis = Alugueis;
}]);




sisKitnetApp.controller('ContratosController', ["$scope", "$location", "$document", "$timeout", "ModalService", "SiskitnetService", function ($scope, $location, $document, $timeout, ModalService, SiskitnetService) {
    var successGetContratos = function(success) {
        $scope.contratos = success.data;
        $scope.haveError  = false;
    };

    var errorGetContratos = function(data) {
        $scope.contratos = [];
        $scope.haveError  = data ;
    };

    SiskitnetService.getContratos(successGetContratos,errorGetContratos);

    $scope.deleteContrato = function(idContrato) {
        bootbox.confirm("Você deseja realmente excluir este contrato?", function(result) {
            if(result) {
                SiskitnetService.excluirContrato(idContrato);
            }
            $timeout(function () {
                //$window.location.reload();
                SiskitnetService.getContratos(successGetContratos,errorGetContratos)
            }, 1000);
        });
    };


    $scope.showContratoModal = function (contrato) {
        ModalService.showModal({
            templateUrl: 'templates/view/contrato/create.html',
            controller: "contratoModalController",
            inputs: {
                contrato : contrato,
            }
        }).then(function (modal) {
            modal.element.modal();
            modal.close.then(function (result) {
                SiskitnetService.getContratos(successGetContratos,errorGetContratos);
                angular.element('.modal-backdrop').hide();
                angular.element($document[0].body).removeClass('modal-open');
                $timeout(function () {
                    $scope.flashMessage = false;
                }, 2000);
            });
        });
    };
}]);

sisKitnetApp.controller('contratoModalController', ["$scope", "close", "$filter", "contrato", "SiskitnetService", function ($scope, close, $filter, contrato, SiskitnetService) {

    var getFromArray = function(array,id) {
        var result = $.grep(array, function(e){ return e.id == id; });
        return result[0];
    };

    if(!angular.isUndefined(contrato)) {
        $scope.contrato = angular.copy(contrato);
        $scope.contrato.data_inicio =  $filter('date')($scope.contrato.data_inicio, 'dd/MM/yyyy');
        $scope.contrato.primeiro_vencimento =  $filter('date')($scope.contrato.primeiro_vencimento, 'dd/MM/yyyy');
    }

    var successGetImoveis = function(success) {
        $scope.listImoveis = success.data;
        $scope.haveError  = false;
        if (!angular.isUndefined($scope.contrato)){
            $scope.contrato.id_imovel = getFromArray($scope.listImoveis,$scope.contrato.id_imovel);
        }
    };

    var errorGetImoveis = function(data) {
        $scope.listImoveis = [];
        $scope.haveError  = data ;
    };

    var successGetLocatarios = function(success) {
        $scope.listLocatarios = success.data;
        $scope.haveError  = false;
        if (!angular.isUndefined($scope.contrato)){
            $scope.contrato.id_locatario = getFromArray($scope.listLocatarios,$scope.contrato.id_locatario);
        }
    };

    var errorGetLocatarios = function(data) {
        $scope.listLocatarios = [];
        $scope.haveError  = data ;
    };

    var successPostContrato = function(response) {
        if (response.data.status) {
            $scope.alert = {type: "success", title: "Parabéns!", message: response.data.message};
            $scope.contrato = undefined;
        }
        else
            $scope.alert = {type: "danger", title: "Ocorreu um problema!", message: response.data.message};
    };
    var errorPostContrato = function(response) {
        $scope.alert = {type: "danger", title: "Ocorreu um problema!", message: response.statusText};
    };

    SiskitnetService.getImoveis(successGetImoveis,errorGetImoveis);
    SiskitnetService.getLocatarios(successGetLocatarios,errorGetLocatarios);

    $scope.fechar = function(result) {
        close(result, 200);
    };

    $scope.salvarContrato = function() {

        $scope.contrato.id_imovel = $scope.contrato.id_imovel.id;
        $scope.contrato.id_locatario = $scope.contrato.id_locatario.id;
        this.tratarData();
        console.log($scope.contrato);
        if (angular.isUndefined(contrato))
            SiskitnetService.inserirContrato($scope.contrato,successPostContrato, errorPostContrato)
        else
            SiskitnetService.atualizarContrato($scope.contrato,successPostContrato, errorPostContrato)

    };

    $scope.tratarData = function() {
        if (angular.isDate($scope.contrato.primeiro_vencimento)) {
            $scope.contrato.primeiro_vencimento = $filter('date')($scope.contrato.primeiro_vencimento, 'yyyy-MM-dd');
            var dateChanged = $scope.contrato.primeiro_vencimento.replace(/\//g, "-");
            $scope.contrato.primeiro_vencimento = $filter('date')(dateChanged, 'yyyy-MM-dd');
        }else
            $scope.contrato.primeiro_vencimento = $scope.contrato.primeiro_vencimento.split("/").reverse().join("-");

        if (angular.isDate($scope.contrato.data_inicio)) {
            $scope.contrato.data_inicio = $filter('date')($scope.contrato.data_inicio, 'yyyy-MM-dd');
            var dateChanged = $scope.contrato.data_inicio.replace(/\//g, "-");
            $scope.contrato.data_inicio = $filter('date')(dateChanged, 'yyyy-MM-dd');
        }else
            $scope.contrato.data_inicio = $scope.contrato.data_inicio.split("/").reverse().join("-");

    }


}]);

sisKitnetApp.controller('DespesasController', ["$scope", "$document", "$timeout", "ModalService", "SiskitnetService", function ($scope, $document, $timeout, ModalService, SiskitnetService) {
    var successGetDespesas = function(success) {
        $scope.despesas = success.data;
        $scope.haveError  = false;
    };

    var errorGetDespesas = function(data) {
        $scope.despesas = [];
        $scope.haveError  = data ;
    };

    SiskitnetService.getDespesas(successGetDespesas,errorGetDespesas);

    $scope.deleteDespesa = function(idDespesa) {
        bootbox.confirm("Você deseja realmente excluir este imóvel?", function(result) {
            if(result) {
                SiskitnetService.excluirDespesa(idDespesa);
            }
            $timeout(function () {
                SiskitnetService.getDespesas(successGetDespesas,errorGetDespesas)
            }, 1000);
        });
    };

    $scope.showDespesaModal = function (despesa) {
        ModalService.showModal({
            templateUrl: 'templates/view/despesa/create.html',
            controller: "despesaModalController",
            inputs: {
                despesa : despesa,
            }
        }).then(function (modal) {
            modal.element.modal();
            modal.close.then(function (result) {
                SiskitnetService.getDespesas(successGetDespesas,errorGetDespesas)
                angular.element('.modal-backdrop').hide();
                angular.element($document[0].body).removeClass('modal-open');
                $timeout(function () {
                    $scope.flashMessage = false;
                }, 2000);
            });
        });
    };

}]);


sisKitnetApp.controller('despesaModalController', ["$scope", "close", "$filter", "despesa", "SiskitnetService", function ($scope, close, $filter, despesa, SiskitnetService) {

    var getFromArray = function(array,id) {
        var result = $.grep(array, function(e){ return e.id == id; });
        return result[0];
    };

    if(!angular.isUndefined(despesa)) {
        $scope.despesa = angular.copy(despesa);
        $scope.despesa.data =  $filter('date')($scope.despesa.data, 'dd/MM/yyyy');
    }

    var successGetTiposDespesas = function(success) {
        $scope.listTiposDespesas = success.data;
        $scope.haveError  = false;
        if (!angular.isUndefined($scope.despesa)){
            $scope.despesa.id_tipo_despesa = getFromArray($scope.listTiposDespesas,$scope.despesa.id_tipo_despesa);
        }
    };

    var errorGetTiposDespesas = function(data) {
        $scope.listTiposDespesas = [];
        $scope.haveError  = data ;
    };

    var successPostDespesa = function(response) {
        if (response.data.status) {
            $scope.alert = {type: "success", title: "Parabéns!", message: response.data.message};
            $scope.despesa = undefined;
        }
        else
            $scope.alert = {type: "danger", title: "Ocorreu um problema!", message: response.data.message};
    };
    var errorPostDespesa = function(response) {
        $scope.alert = {type: "danger", title: "Ocorreu um problema!", message: response.statusText};
    };

    SiskitnetService.getTiposDespesas(successGetTiposDespesas,errorGetTiposDespesas);

    $scope.fechar = function(result) {
        close(result, 200);
    };

    $scope.salvarDespesa = function() {
        $scope.despesa.id_tipo_despesa = $scope.despesa.id_tipo_despesa.id;
        this.tratarData();
        if (angular.isUndefined(despesa))
            SiskitnetService.inserirDespesa($scope.despesa,successPostDespesa, errorPostDespesa);
        else
            SiskitnetService.atualizarDespesa($scope.despesa,successPostDespesa, errorPostDespesa);

    };

    $scope.tratarData = function() {
        if (angular.isDate($scope.despesa.data)) {
            $scope.despesa.data = $filter('date')($scope.despesa.data, 'yyyy-MM-dd');
            var dateChanged = $scope.despesa.data.replace(/\//g, "-");
            $scope.despesa.data = $filter('date')(dateChanged, 'yyyy-MM-dd');
        }else
            $scope.despesa.data = $scope.despesa.data.split("/").reverse().join("-");

    }


}]);/**
 * Created by claud on 29/10/2017.
 */

sisKitnetApp.controller('HomeController', ["$scope", "$rootScope", "$document", "$timeout", "ModalService", "SiskitnetService", function ($scope,$rootScope, $document, $timeout, ModalService, SiskitnetService) {
    var successGetQuanitativos = function(success) {
        $scope.quantitativos = success.data;
        $scope.haveError  = false;
    };

    var errorGetQuanitativos = function(data) {
        $scope.quantitativos = [];
        $scope.haveError  = data ;
    };
    SiskitnetService.getQuantitativos(successGetQuanitativos,errorGetQuanitativos);
}]);
sisKitnetApp.controller('ImoveisController', ["$scope", "$document", "$timeout", "ModalService", "SiskitnetService", function ($scope, $document, $timeout, ModalService, SiskitnetService) {
    var successGetImoveis = function(success) {
        $scope.imoveis = success.data;
        $scope.haveError  = false;
    };

    var errorGetImoveis = function(data) {
        $scope.imoveis = [];
        $scope.haveError  = data ;
    };

    SiskitnetService.getImoveis(successGetImoveis,errorGetImoveis);

    $scope.deleteImovel = function(idImovel) {
        bootbox.confirm("Você deseja realmente excluir este imóvel?", function(result) {
            if(result) {
                SiskitnetService.excluirImovel(idImovel);
            }
            $timeout(function () {
                SiskitnetService.getLocatarios(successGetImoveis,errorGetImoveis)
            }, 1000);
        });
    };

    $scope.showImovelModal = function (imovel) {
        ModalService.showModal({
            templateUrl: 'templates/view/imovel/create.html',
            controller: "imovelModalController",
            inputs: {
                imovel : imovel,
            }
        }).then(function (modal) {
            modal.element.modal();
            modal.close.then(function (result) {
                SiskitnetService.getImoveis(successGetImoveis,errorGetImoveis);
                angular.element('.modal-backdrop').hide();
                angular.element($document[0].body).removeClass('modal-open');
                $timeout(function () {
                    $scope.flashMessage = false;
                }, 2000);
            });
        });
    };

}]);


sisKitnetApp.controller('imovelModalController', ["$scope", "close", "$filter", "imovel", "SiskitnetService", function ($scope, close, $filter, imovel, SiskitnetService) {

    var getFromArray = function(array,id) {
        var result = $.grep(array, function(e){ return e.id == id; });
        return result[0];
    };

    if(!angular.isUndefined(imovel)) {
        $scope.imovel = angular.copy(imovel);
    }

    var successGetTiposImoveis = function(success) {
        $scope.listTiposImoveis = success.data;
        $scope.haveError  = false;
        if (!angular.isUndefined($scope.imovel)){
            $scope.imovel.id_tipo_imovel = getFromArray($scope.listTiposImoveis,$scope.imovel.id_tipo_imovel);
        }
    };

    var errorGetTiposImoveis = function(data) {
        $scope.listTiposImoveis = [];
        $scope.haveError  = data ;
    };

    var successPostImovel = function(response) {
        if (response.data.status) {
            $scope.alert = {type: "success", title: "Parabéns!", message: response.data.message};
            $scope.imovel = undefined;
        }
        else
            $scope.alert = {type: "danger", title: "Ocorreu um problema!", message: response.data.message};
    };
    var errorPostImovel = function(response) {
        $scope.alert = {type: "danger", title: "Ocorreu um problema!", message: response.statusText};
    };

    SiskitnetService.getTipoImoveis(successGetTiposImoveis,errorGetTiposImoveis);

    $scope.fechar = function(result) {
        close(result, 200);
    };

    $scope.salvarImovel = function() {
        $scope.imovel.id_tipo_imovel = $scope.imovel.id_tipo_imovel.id;
        if (angular.isUndefined(imovel))
            SiskitnetService.inserirImovel($scope.imovel,successPostImovel, errorPostImovel);
        else
            SiskitnetService.atualizarImovel($scope.imovel,successPostImovel, errorPostImovel);

    };


}]);/**
 * Created by claud on 29/10/2017.
 */

sisKitnetApp.controller('LocatariosController', ["$scope", "$document", "$timeout", "ModalService", "SiskitnetService", function ($scope, $document, $timeout, ModalService, SiskitnetService) {
    var successGetLocatarios = function(success) {
        $scope.locatarios = success.data;
        $scope.haveError  = false;
    };

    var errorGetLocatarios = function(data) {
        $scope.locatarios = [];
        $scope.haveError  = data ;
    };

    SiskitnetService.getLocatarios(successGetLocatarios,errorGetLocatarios);

    $scope.deleteLocatario = function(idLocatario) {
        bootbox.confirm("Você deseja realmente excluir este locatário?", function(result) {
            if(result) {
                SiskitnetService.excluirLocatario(idLocatario);
            }
            $timeout(function () {
                //$window.location.reload();
                SiskitnetService.getLocatarios(successGetLocatarios,errorGetLocatarios)
            }, 1000);
        });
    };

    $scope.showLocatarioModal = function (locatario) {
        ModalService.showModal({
            templateUrl: 'templates/view/locatario/create.html',
            controller: "locatarioModalController",
            inputs: {
                locatario : locatario,
            }
        }).then(function (modal) {
            modal.element.modal();
            modal.close.then(function (result) {
                SiskitnetService.getLocatarios(successGetLocatarios,errorGetLocatarios);
                angular.element('.modal-backdrop').hide();
                angular.element($document[0].body).removeClass('modal-open');
                $timeout(function () {
                    $scope.flashMessage = false;
                }, 2000);
            });
        });
    };

}]);


sisKitnetApp.controller('locatarioModalController', ["$scope", "close", "$filter", "locatario", "SiskitnetService", function ($scope, close, $filter, locatario, SiskitnetService) {

    var getFromArray = function(array,id) {
        var result = $.grep(array, function(e){ return e.id == id; });
        return result[0];
    };

    if(!angular.isUndefined(locatario)) {
        $scope.locatario = angular.copy(locatario);
         //$scope.locatario.data_nascimento = new Date($scope.locatario.data_nascimento);
        // $scope.data_nascimento.setDate($scope.data_nascimento.getDate() + 1);
        // $scope.locatario.data_nascimento = $scope.data_nascimento;

        $scope.locatario.data_nascimento =  $filter('date')($scope.locatario.data_nascimento, 'dd/MM/yyyy');
    }

    var successGetEstadosCivis = function(success) {
        $scope.listEstadosCivis = success.data;
        $scope.haveError  = false;
        if (!angular.isUndefined($scope.locatario)){
            $scope.locatario.id_estado_civil = getFromArray($scope.listEstadosCivis,$scope.locatario.id_estado_civil);
        }
    };

    var errorGetEstadosCivis = function(data) {
        $scope.listEstadosCivis = [];
        $scope.haveError  = data ;
    };

    var successPostLocatario = function(response) {
        if (response.data.status) {
            $scope.alert = {type: "success", title: "Parabéns!", message: response.data.message};
            $scope.locatario = undefined;
        }
        else
            $scope.alert = {type: "danger", title: "Ocorreu um problema!", message: response.data.message};
    };
    var errorPostLocatario = function(response) {
        $scope.alert = {type: "danger", title: "Ocorreu um problema!", message: response.statusText};
    };

    SiskitnetService.getEstadosCivis(successGetEstadosCivis,errorGetEstadosCivis);

    $scope.fechar = function(result) {
        close(result, 200);
    };

    $scope.salvarLocatario = function() {

        $scope.locatario.id_estado_civil = $scope.locatario.id_estado_civil.id;
        this.tratarData();
        if (angular.isUndefined(locatario))
            SiskitnetService.inserirLocatario($scope.locatario,successPostLocatario, errorPostLocatario);
        else
            SiskitnetService.atualizarLocatario($scope.locatario,successPostLocatario, errorPostLocatario);

    };

    $scope.tratarData = function() {
        if (angular.isDate($scope.locatario.data_nascimento)) {
            $scope.locatario.data_nascimento = $filter('date')($scope.locatario.data_nascimento, 'yyyy-MM-dd');
            var dateChanged = $scope.locatario.data_nascimento.replace(/\//g, "-");
            $scope.locatario.data_nascimento = $filter('date')(dateChanged, 'yyyy-MM-dd');
        }else
            $scope.locatario.data_nascimento = $scope.locatario.data_nascimento.split("/").reverse().join("-");

    }


}]);
sisKitnetApp.controller('LoginController', ["$scope", "$window", "$rootScope", "$document", "$location", "$timeout", "AuthenticationService", function ($scope, $window, $rootScope, $document, $location, $timeout, AuthenticationService) {
    AuthenticationService.ClearCredentials();
    //console.log($rootScope.globals);
    $scope.autenticar = function(){
        $scope.dataLoading = true;
        AuthenticationService.getLogin($scope.formulario, function(response) {
            if(response.data.status == true) {
                AuthenticationService.SetCredentials($scope.formulario.login, $scope.formulario.senha);
                $rootScope.id = 'id="page-wrapper"';
                 $location.path('/');
                $window.location.reload();
            } else {

                $scope.alert = {type: "danger", title: "Ocorreu um problema!", message: response.data.message}
                $scope.dataLoading = false;
            }
        });
    };
}]);



// 'use strict';
//
// angular.module('Authentication', 'sisKitnetApp')
//
// .controller('LoginController',
//         ['$scope', '$rootScope', '$location', 'AuthenticationService',
//             function ($scope, $rootScope, $location, AuthenticationService) {
//                 // reset login status
//                 AuthenticationService.ClearCredentials();
//
//                 $scope.login = function () {
//                     $scope.dataLoading = true;
//                     AuthenticationService.getLogin($scope.formulario, function(response) {
//                         if(response.success) {
//                             AuthenticationService.SetCredentials($scope.formulario.login, $scope.formulario.senha);
//                             $location.path('/');
//                         } else {
//                             $scope.alert = response.message;
//                             $scope.dataLoading = false;
//                         }
//                     });
//                 };
//             }]);
sisKitnetApp.controller('LogoutController', ["$scope", "$rootScope", "$window", "$document", "$location", "$timeout", "AuthenticationService", function ($scope, $rootScope, $window, $document, $location, $timeout, AuthenticationService) {
    $rootScope.sair = function(){
        console.log("chegou aqui");
        AuthenticationService.ClearCredentials();

        $location.path('/login');
        $rootScope.logado = false;
        $window.location.reload();
    };

}]);
sisKitnetApp.controller('PagamentosController', ["$scope", "$document", "$timeout", "ModalService", "SiskitnetService", function ($scope, $document, $timeout, ModalService, SiskitnetService) {
    var successGetPagamentos = function(success) {
        $scope.pagamentos = success.data;
        $scope.haveError  = false;
    };

    var errorGetPagamentos = function(data) {
        $scope.pagamentos = [];
        $scope.haveError  = data ;
    };

    SiskitnetService.getPagamentos(successGetPagamentos,errorGetPagamentos);

    $scope.deletePagamento = function(pagamento) {
        bootbox.confirm("Você deseja realmente excluir este imóvel?", function(result) {
            if(result) {
                SiskitnetService.excluirPagamento(pagamento);
            }
            $timeout(function () {
                SiskitnetService.getPagamentos(successGetPagamentos,errorGetPagamentos)
            }, 1000);
        });
    };

    $scope.showPagamentoModal = function (pagamento) {
        ModalService.showModal({
            templateUrl: 'templates/view/pagamento/create.html',
            controller: "pagamentoModalController",
            inputs: {
                pagamento : pagamento,
            }
        }).then(function (modal) {
            modal.element.modal();
            modal.close.then(function (result) {
                SiskitnetService.getPagamentos(successGetPagamentos,errorGetPagamentos)
                angular.element('.modal-backdrop').hide();
                angular.element($document[0].body).removeClass('modal-open');
                $timeout(function () {
                    $scope.flashMessage = false;
                }, 2000);
            });
        });
    };

}]);


sisKitnetApp.controller('pagamentoModalController', ["$scope", "close", "$filter", "pagamento", "SiskitnetService", function ($scope, close, $filter, pagamento, SiskitnetService) {

    var getFromArray = function(array,id) {
        var result = $.grep(array, function(e){ return e.id == id; });
        return result[0];
    };

    if(!angular.isUndefined(pagamento)) {
        $scope.pagamento = angular.copy(pagamento);
        console.log($scope.pagamento);
        $scope.pagamento.data_pagamento =  $filter('date')($scope.pagamento.data_pagamento, 'dd/MM/yyyy');
        $scope.pagamento.periodo_inicial =  $filter('date')($scope.pagamento.periodo_inicial, 'dd/MM/yyyy');
        $scope.pagamento.periodo_final =  $filter('date')($scope.pagamento.periodo_final, 'dd/MM/yyyy');
    }

    var successGetContratosVigentes = function(success) {
        $scope.listContratosVigentes = success.data;
        $scope.haveError  = false;
        if (!angular.isUndefined($scope.pagamento)){
            $scope.pagamento.id_contrato = getFromArray($scope.listContratosVigentes,$scope.pagamento.id_contrato);
        }
    };

    var errorGetContratosVigentes = function(data) {
        $scope.listContratosVigentes = [];
        $scope.haveError  = data ;
    };

    var successPostPagamento = function(response) {
        if (response.data.status) {
            $scope.alert = {type: "success", title: "Parabéns!", message: response.data.message};
            $scope.pagamento = undefined;
        }
        else
            $scope.alert = {type: "danger", title: "Ocorreu um problema!", message: response.data.message};
    };
    var errorPostPagamento = function(response) {
        $scope.alert = {type: "danger", title: "Ocorreu um problema!", message: response.statusText};
    };

    SiskitnetService.getContratosVigentes(successGetContratosVigentes,errorGetContratosVigentes);

    $scope.setValorBase = function(){
        //$scope.pagamento.desconto = 0;
        $scope.pagamento.valor_base = $scope.pagamento.id_contrato.valor;
        //$scope.pagamento.valor_total = parseFloat($scope.pagamento.desconto) + parseFloat($scope.pagamento.valor_base);
    };

    $scope.setValorTotal = function(){
        $scope.pagamento.valor_total = parseFloat($scope.pagamento.valor_base) - parseFloat($scope.pagamento.desconto);
    };

    $scope.fechar = function(result) {
        close(result, 200);
    };



    $scope.salvarPagamento = function() {
        $scope.pagamento.id_contrato = $scope.pagamento.id_contrato.id;
        this.tratarData();
        if (angular.isUndefined(pagamento))
            SiskitnetService.inserirPagamento($scope.pagamento,successPostPagamento, errorPostPagamento);
        else
            SiskitnetService.atualizarPagamento($scope.pagamento,successPostPagamento, errorPostPagamento);

    };

    $scope.tratarData = function() {
        if (angular.isDate($scope.pagamento.periodo_inicial)) {
            $scope.pagamento.periodo_inicial = $filter('date')($scope.pagamento.periodo_inicial, 'yyyy-MM-dd');
            var dateChanged = $scope.pagamento.periodo_inicial.replace(/\//g, "-");
            $scope.pagamento.periodo_inicial = $filter('date')(dateChanged, 'yyyy-MM-dd');
        }else
            $scope.pagamento.periodo_inicial = $scope.pagamento.periodo_inicial.split("/").reverse().join("-");

        if (angular.isDate($scope.pagamento.periodo_final)) {
            $scope.pagamento.periodo_final = $filter('date')($scope.pagamento.periodo_final, 'yyyy-MM-dd');
            var dateChanged = $scope.pagamento.periodo_final.replace(/\//g, "-");
            $scope.pagamento.periodo_final = $filter('date')(dateChanged, 'yyyy-MM-dd');
        }else
            $scope.pagamento.periodo_final = $scope.pagamento.periodo_final.split("/").reverse().join("-");

        if (angular.isDate($scope.pagamento.data_pagamento)) {
            $scope.pagamento.data_pagamento = $filter('date')($scope.pagamento.data_pagamento, 'yyyy-MM-dd');
            var dateChanged = $scope.pagamento.data_pagamento.replace(/\//g, "-");
            $scope.pagamento.data_pagamento = $filter('date')(dateChanged, 'yyyy-MM-dd');
        }else
            $scope.pagamento.data_pagamento = $scope.pagamento.data_pagamento.split("/").reverse().join("-");

    }


}]);/**
 * Created by claud on 29/10/2017.
 */


sisKitnetApp.controller('RenovacaoController', ["$scope", "$document", "$timeout", "ModalService", "SiskitnetService", function ($scope, $document, $timeout, ModalService, SiskitnetService) {
    //$scope.contratos_vencidos = Vencidos;
    SiskitnetService.getContratosVencidos();
    $scope.naoRenovarContrato = function(idContrato) {
        bootbox.confirm("Você deseja realmente NÃO renovar este contrato?", function(result) {
            if(result) {
                SiskitnetService.naoRenovar(idContrato);
            }
            $timeout(function () {
                //$window.location.reload();
                SiskitnetService.getContratosVencidos();
            }, 1000);
        });
    };

    $scope.showRenovacaoModal = function (contrato) {
        ModalService.showModal({
            templateUrl: 'templates/view/renovacao/create.html',
            controller: "renovacaoModalController",
            inputs: {
                contrato : contrato,
            }
        }).then(function (modal) {
            modal.element.modal();
            modal.close.then(function (result) {
                //$scope.contratos_vencidos = Vencidos;
                SiskitnetService.getContratosVencidos();
                angular.element('.modal-backdrop').hide();
                angular.element($document[0].body).removeClass('modal-open');
                $timeout(function () {
                    $scope.flashMessage = false;
                }, 2000);
            });
        });
    };
}]);

sisKitnetApp.controller('renovacaoModalController', ["$scope", "close", "$filter", "contrato", "SiskitnetService", function ($scope, close, $filter, contrato, SiskitnetService) {
    var successPostRenovacao = function(response) {
        if (response.data.status) {
            $scope.alert = {type: "success", title: "Parabéns!", message: response.data.message};
            $scope.contrato = undefined;
        }
        else
            $scope.alert = {type: "danger", title: "Ocorreu um problema!", message: response.data.message};
    };
    var errorPostRenovacao = function(response) {
        $scope.alert = {type: "danger", title: "Ocorreu um problema!", message: response.statusText};
    };

    $scope.fechar = function(result) {
        close(result, 200);
    };

    $scope.renovarContrato = function() {
        $scope.renovacao.id_contrato = contrato.id;
        $scope.renovacao.id_locatario = contrato.id_locatario;
        $scope.renovacao.id_imovel = contrato.id_imovel;
        this.tratarData();
            SiskitnetService.renovar($scope.renovacao,successPostRenovacao, errorPostRenovacao);
    };

    $scope.tratarData = function() {
        if (angular.isDate($scope.renovacao.data_inicio)) {
            $scope.renovacao.data_inicio = $filter('date')($scope.renovacao.data_inicio, 'yyyy-MM-dd');
            var dateChanged = $scope.renovacao.data_inicio.replace(/\//g, "-");
            $scope.renovacao.data_inicio = $filter('date')(dateChanged, 'yyyy-MM-dd');
        }else
            $scope.renovacao.data_inicio = $scope.renovacao.data_inicio.split("/").reverse().join("-");

        if (angular.isDate($scope.renovacao.primeiro_vencimento)) {
            $scope.renovacao.primeiro_vencimento = $filter('date')($scope.renovacao.primeiro_vencimento, 'yyyy-MM-dd');
            var dateChanged = $scope.renovacao.primeiro_vencimento.replace(/\//g, "-");
            $scope.renovacao.primeiro_vencimento = $filter('date')(dateChanged, 'yyyy-MM-dd');
        }else
            $scope.renovacao.primeiro_vencimento = $scope.renovacao.primeiro_vencimento.split("/").reverse().join("-");

    }

}]);




'use strict';

//var angular.module('Authentication', 'sisKitnet-App')

sisKitnetApp.factory('AuthenticationService',
        ['Base64', '$http', '$cookieStore', '$rootScope', '$timeout',
            function (Base64, $http, $cookieStore, $rootScope, $timeout) {
                var service = {};

                service.getLogin = function (dados, callback) {
                    $http.post("login/autenticar",dados)
                        .then(function (response) {
                            callback(response);
                        });
                };

                service.SetCredentials = function (username, password) {
                    var authdata = Base64.encode(username + ':' + password);

                    $rootScope.globals = {
                        currentUser: {
                            username: username,
                            authdata: authdata
                        }
                    };

                    $http.defaults.headers.common['Authorization'] = 'Basic ' + authdata; // jshint ignore:line
                    $cookieStore.put('globals', $rootScope.globals);
                };

                service.ClearCredentials = function () {
                    $http.get("login/logout")
                        .then(function mySuccess(data) {
                        }, function myError(meta) {
                        });
                    $rootScope.globals = {};
                    $cookieStore.remove('globals');
                    $http.defaults.headers.common.Authorization = 'Basic ';
                };

                return service;
            }])

    .factory('Base64', function () {
        /* jshint ignore:start */

        var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

        return {
            encode: function (input) {
                var output = "";
                var chr1, chr2, chr3 = "";
                var enc1, enc2, enc3, enc4 = "";
                var i = 0;

                do {
                    chr1 = input.charCodeAt(i++);
                    chr2 = input.charCodeAt(i++);
                    chr3 = input.charCodeAt(i++);

                    enc1 = chr1 >> 2;
                    enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                    enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
                    enc4 = chr3 & 63;

                    if (isNaN(chr2)) {
                        enc3 = enc4 = 64;
                    } else if (isNaN(chr3)) {
                        enc4 = 64;
                    }

                    output = output +
                        keyStr.charAt(enc1) +
                        keyStr.charAt(enc2) +
                        keyStr.charAt(enc3) +
                        keyStr.charAt(enc4);
                    chr1 = chr2 = chr3 = "";
                    enc1 = enc2 = enc3 = enc4 = "";
                } while (i < input.length);

                return output;
            },

            decode: function (input) {
                var output = "";
                var chr1, chr2, chr3 = "";
                var enc1, enc2, enc3, enc4 = "";
                var i = 0;

                // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
                var base64test = /[^A-Za-z0-9\+\/\=]/g;
                if (base64test.exec(input)) {
                    window.alert("There were invalid base64 characters in the input text.\n" +
                        "Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\n" +
                        "Expect errors in decoding.");
                }
                input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

                do {
                    enc1 = keyStr.indexOf(input.charAt(i++));
                    enc2 = keyStr.indexOf(input.charAt(i++));
                    enc3 = keyStr.indexOf(input.charAt(i++));
                    enc4 = keyStr.indexOf(input.charAt(i++));

                    chr1 = (enc1 << 2) | (enc2 >> 4);
                    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                    chr3 = ((enc3 & 3) << 6) | enc4;

                    output = output + String.fromCharCode(chr1);

                    if (enc3 != 64) {
                        output = output + String.fromCharCode(chr2);
                    }
                    if (enc4 != 64) {
                        output = output + String.fromCharCode(chr3);
                    }

                    chr1 = chr2 = chr3 = "";
                    enc1 = enc2 = enc3 = enc4 = "";

                } while (i < input.length);

                return output;
            }
        };

        /* jshint ignore:end */
    });
sisKitnetApp.service('SiskitnetService', ["$http", "$q", "$window", "$rootScope", "$httpParamSerializerJQLike", function ($http, $q, $window, $rootScope,$httpParamSerializerJQLike) {
    /*LOCATÁRIOS*/
    this.getLocatarios = function (callbackSuccess, callbackError) {
        $http.get("locatarios/listar")
            .then(callbackSuccess, callbackError);
    };

    this.getEstadosCivis = function (success, error) {
      $http.get("estadoscivis/listar")
          .then(success,error);
    };

    this.inserirLocatario = function (data, callbackSuccess, callbackError) {
        $window.scrollTo(0, 0);
        $http.post("locatarios/cadastrar", data)
            .then(callbackSuccess, callbackError);
    };

    this.atualizarLocatario = function ( data, callbackSuccess, callbackError) {
        $window.scrollTo(0,0);
        $http.put("locatarios/atualizar", data)
            .then(callbackSuccess, callbackError);
    };

    this.excluirLocatario = function (id, callbackSuccess, callbackError) {

        var config = {
            headers: {'Content-Type': 'application/x-www-form-urlencoded'},
            data: $httpParamSerializerJQLike({
                id: id
            })
        };

        $http.delete("locatarios/remover", config)
            .then(callbackSuccess, callbackError);
    };


    //     var dt = $(params).serialize();
    //     $http({
    //         method: 'DELETE',
    //         url: 'locatarios/remover',
    //         data: $httpParamSerializerJQLike(params),
    //         headers: {'Content-Type': 'application/x-www-form-urlencoded'}
    //     }).then( callbackSuccess, callbackError );
    // };

        /* CONTRATOS*/

        this.getContratos = function (callbackSuccess, callbackError) {
            $http.get("contratos/listar")
                .then(callbackSuccess, callbackError);
        };

        this.getImoveis = function (success, error) {
            $http.get("imoveis/listar")
                .then(success,error);
        };

        this.getLocatarios = function (success, error) {
            $http.get("locatarios/listar")
                .then(success,error);
        };


        this.inserirContrato = function (data, callbackSuccess, callbackError) {
            $window.scrollTo(0, 0);
            $http.post("contratos/cadastrar", data)
                .then(callbackSuccess, callbackError);
        };

        this.atualizarContrato = function ( data, callbackSuccess, callbackError) {
            $window.scrollTo(0,0);
            $http.put("contratos/atualizar", data)
                .then(callbackSuccess, callbackError);
        };

        this.excluirContrato = function (id, callbackSuccess, callbackError) {

            var config = {
                headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                data: $httpParamSerializerJQLike({
                    id: id
                })
            };

            $http.delete("contratos/remover",config)
                .then( callbackSuccess, callbackError );
       };

    /* IMOVEIS*/

    this.getListImoveis = function (callbackSuccess, callbackError) {
        $http.get("imoveis/listar")
            .then(callbackSuccess, callbackError);
    };

    this.getTipoImoveis = function (success, error) {
        $http.get("tipoimoveis/listar")
            .then(success,error);
    };

    this.inserirImovel = function (data, callbackSuccess, callbackError) {
        $http.post("imoveis/cadastrar", data)
            .then(callbackSuccess, callbackError);
    };

    this.atualizarImovel = function ( data, callbackSuccess, callbackError) {
        $window.scrollTo(0,0);
        $http.put("imoveis/atualizar", data)
            .then(callbackSuccess, callbackError);
    };

    this.excluirImovel = function (id, callbackSuccess, callbackError) {

        var config = {
            headers: {'Content-Type': 'application/x-www-form-urlencoded'},
            data: $httpParamSerializerJQLike({
                id: id
            })
        };

        $http.delete("imoveis/remover",config)
            .then( callbackSuccess, callbackError );
    };

    /* DESPESAS*/

    this.getDespesas = function (callbackSuccess, callbackError) {
        $http.get("despesas/listar")
            .then(callbackSuccess, callbackError);
    };

    this.getTiposDespesas = function (success, error) {
        $http.get("tipodespesas/listar")
            .then(success,error);
    };

    this.inserirDespesa = function (data, callbackSuccess, callbackError) {
        $http.post("despesas/cadastrar", data)
            .then(callbackSuccess, callbackError);
    };

    this.atualizarDespesa = function ( data, callbackSuccess, callbackError) {
        $window.scrollTo(0,0);
        $http.put("despesas/atualizar", data)
            .then(callbackSuccess, callbackError);
    };

    this.excluirDespesa = function (id, callbackSuccess, callbackError) {

        var config = {
            headers: {'Content-Type': 'application/x-www-form-urlencoded'},
            data: $httpParamSerializerJQLike({
                id: id
            })
        };

        $http.delete("despesas/remover",config)
            .then( callbackSuccess, callbackError );
    };

    /* PAGAMENTOS*/

    this.getPagamentos = function (callbackSuccess, callbackError) {
        $http.get("pagamento/listar")
            .then(callbackSuccess, callbackError);
    };

    this.getContratosVigentes = function (callbackSuccess, callbackError) {
        $http.get("contratos/getContratosVigentes")
            .then(callbackSuccess, callbackError);
    };

    this.inserirPagamento = function (data, callbackSuccess, callbackError) {
        $http.post("pagamento/cadastrar", data)
            .then(callbackSuccess, callbackError);
    };

    this.atualizarPagamento = function ( data, callbackSuccess, callbackError) {
        $http.put("pagamento/atualizar", data)
            .then(callbackSuccess, callbackError);
    };

    this.excluirPagamento = function (pagamento, callbackSuccess, callbackError) {

        var config = {
            headers: {'Content-Type': 'application/x-www-form-urlencoded'},
            data: $httpParamSerializerJQLike({
                pagamento: pagamento
            })
        };

        $http.delete("pagamento/remover",config)
            .then( callbackSuccess, callbackError );
    };

    this.getQuantitativos = function (callbackSuccess, callbackError) {
        $http.get("home/index")
            .then(callbackSuccess, callbackError);
    };

    this.getContratosVencidos = function() {
        //var deferred = $q.defer();
        $http.get("renovacao/getContratosVencidos")
            .then(function mySuccess(data) {
                //deferred.resolve(data.data);
                $rootScope.contratos_vencidos = data.data;
                $rootScope.haveError  = false;
            }, function myError(meta) {
                //deferred.reject(meta);
                $rootScope.contratos_vencidos = [];
                $rootScope.haveError  = meta ;
            });
        //return deferred.promise;
    };

    this.getAlugueisMes = function() {
        var deferred = $q.defer();
        $http.get("alugueis/getAlugueisMes")
            .then(function mySuccess(data) {
                deferred.resolve(data.data);
            }, function myError(meta) {
                deferred.reject(meta);
            });

        return deferred.promise;
    };

    this.getAlugueisAtrasados = function() {
        var deferred = $q.defer();
        $http.get("aluguel/getAlugueisAtrasados")
            .then(function mySuccess(data) {
                deferred.resolve(data.data);
            }, function myError(meta) {
                deferred.reject(meta);
            });

        return deferred.promise;
    };

    this.renovar = function (data, callbackSuccess, callbackError) {
        $http.post("renovacao/renovar", data)
            .then(callbackSuccess, callbackError);
    };

    this.naoRenovar = function ( data, callbackSuccess, callbackError) {
        $http.put("renovacao/naoRenovar", data)
            .then(callbackSuccess, callbackError);
    };

    this.getLogin = function (dados) {
        console.log(dados);
        $http.post("login/autenticar",dados)
            .then(function mySuccess(data) {
                if (data.data.status) {
                    $rootScope.alert = {type: "success", title: "Parabéns!", message: data.data.message};
                    $rootScope.login = undefined;
                }
                else
                    $rootScope.alert = {type: "danger", title: "Ocorreu um problema!", message: data.data.message}
            }, function myError(meta) {
                $rootScope.alert = {type: "danger", title: "Ocorreu um problema!", message: meta.statusText};
            });
    };

}]);
